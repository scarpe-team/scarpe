---
description: A rule to guide the debugging process when tests fail by adding puts statements, analyzing output, fixing the issue, and cleaning up.
globs: "**/*_test.rb"
---
# Debug Failed Tests

A rule that guides you to add debugging statements when a test fails, run the test again to understand the issue, implement a fix, and then remove the debugging statements once everything works.

<rule>
name: debug_failed_tests
description: When a test fails, add debugging statements before implementing a fix
filters:
  - type: event
    pattern: "test_failed"

actions:
  - type: suggest
    message: |
      # Add debugging statements

      Identify the failing test and add strategic 'puts' statements to print relevant variables, state, or execution flow information that might help diagnose the issue.

      Example:
      ```ruby
      # Before
      def calculate_total(items)
        items.sum { |item| item[:price] * item[:quantity] }
      end

      # After adding debugging
      def calculate_total(items)
        puts "Items received: #{items.inspect}"
        total = items.sum do |item|
          puts "Processing item: #{item[:name]}, price: #{item[:price]}, quantity: #{item[:quantity]}"
          item[:price] * item[:quantity]
        end
        puts "Calculated total: #{total}"
        total
      end
      ```

  - type: suggest
    message: |
      # Run the test with debugging

      Run the failing test again and analyze the debugging output to understand what's happening and why the test is failing.

  - type: suggest
    message: |
      # Implement a fix

      Now that you understand the issue better from the debugging output, implement a solution to fix the failing test.

  - type: suggest
    message: |
      # Verify the fix

      Run the test again to ensure your fix resolves the issue and the test now passes.

  - type: suggest
    message: |
      # Clean up debugging statements

      Now that the test is passing, remove all the debugging statements you added to keep the code clean and production-ready.

      Example:
      ```ruby
      # Before (with debugging)
      def calculate_total(items)
        puts "Items received: #{items.inspect}"
        total = items.sum do |item|
          puts "Processing item: #{item[:name]}, price: #{item[:price]}, quantity: #{item[:quantity]}"
          item[:price] * item[:quantity]
        end
        puts "Calculated total: #{total}"
        total
      end

      # After (debugging removed)
      def calculate_total(items)
        items.sum { |item| item[:price] * item[:quantity] }
      end
      ```

examples:
  - input: |
      # A failing test for a calculation method
      def test_calculate_total
        items = [
          { name: "Item 1", price: 10, quantity: 2 },
          { name: "Item 2", price: 15, quantity: 3 }
        ]
        assert_equal 65, calculate_total(items)
      end
    output: "Added debugging, fixed the issue, and removed debugging statements"

metadata:
  priority: medium
  version: 1.0
</rule>
