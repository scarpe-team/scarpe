---
description:
globs: **/calzini/**/*.rb
alwaysApply: false
---
# Component Context

<rule>
name: component_context
description: Share relevant component documentation when working with Calzini components and widgets
filters:
  - type: file
    pattern: **/*component*.rb
  - type: file
    pattern: **/*component*.md
  - type: file
    pattern: **/*calzini*.rb
  - type: file
    pattern: **/*calzini*.md
  - type: file
    pattern: **/*widget*.rb
  - type: file
    pattern: **/*widget*.md

actions:
  - type: suggest
    message: |
      # Component Context

      When working with Scarpe's component system (Calzini), consider:

      1. Component Architecture
         - [calzini_components_and_updates.md](mdc:docs/calzini_components_and_updates.md) - Core component documentation
         - [scarpe_shoes_incompatibilities.md](mdc:docs/scarpe_shoes_incompatibilities.md) - API differences from Shoes

      2. Component Lifecycle:
         ```ruby
         class CalziniComponent
           def initialize
             setup_state
             register_handlers
           end

           def update
             calculate_layout
             trigger_display_update
           end
         end
         ```

      3. State Management:
         - Internal component state
         - Props from parent components
         - Global application state
         - Shared resources

      4. Best Practices:
         - Keep components focused and single-purpose
         - Handle state updates efficiently
         - Consider compatibility with original Shoes
         - Maintain proper event handling

      5. Additional Resources:
         - Wiki: https://github.com/scarpe-team/scarpe/wiki/ScarpeDesign.md#calzini-components-and-updates
         - Related sections:
           * Display Service Separation
           * Event Loops
           * Shoes and Display Events

examples:
  - description: "Working with components"
    input: |
      When implementing components:
      1. Follow the component lifecycle
      2. Handle state updates properly
      3. Consider compatibility implications
      4. Use proper event handling patterns

metadata:
  priority: high
  version: 1.0
</rule>
