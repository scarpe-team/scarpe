---
description: Share timeout and handler context when working with timing-related code
globs:
alwaysApply: false
---
# Timeout and Handler Context

<rule>
name: timeout_context
description: Share relevant timeout and handler documentation when working with timing-related code
filters:
  - type: file
    pattern: **/*timeout*.rb
  - type: file
    pattern: **/*timeout*.md
  - type: file
    pattern: **/*handler*.rb
  - type: file
    pattern: **/*handler*.md
  - type: file
    pattern: **/*timer*.rb
  - type: file
    pattern: **/*timer*.md

actions:
  - type: suggest
    message: |
      # Timeout and Handler Context

      When working with Scarpe's timeout and handler system, consider:

      1. Timeout Implementation
         - [timeouts_and_handlers.md](mdc:docs/timeouts_and_handlers.md) - Core timeout documentation
         - [event_loops.md](mdc:docs/event_loops.md) - Event loop integration

      2. Key Concepts:
         ```ruby
         def after(milliseconds, &block)
           register_timeout(Time.now + (milliseconds / 1000.0), block)
         end
         ```

      3. Cooperative Nature:
         - Timeouts don't interrupt execution
         - Processed when event loop is ready
         - Timing is approximate, not exact

      4. Handler Registration:
         - Handlers registered with specific events
         - Multiple handlers per event possible
         - Order of execution preserved

      5. Best Practices:
         - Keep handlers non-blocking
         - Use appropriate timing granularity
         - Consider event loop implications
         - Handle errors appropriately

      6. Additional Resources:
         - Wiki: https://github.com/scarpe-team/scarpe/wiki/ScarpeDesign.md#timeouts-and-handlers
         - Related sections:
           * Event Loops
           * Display Service Separation
           * Shoes and Display Events

examples:
  - description: "Working with timeouts"
    input: |
      When implementing timeouts:
      1. Consider cooperative nature
      2. Use appropriate timing
      3. Keep handlers non-blocking
      4. Handle errors properly

metadata:
  priority: high
  version: 1.0
</rule>
