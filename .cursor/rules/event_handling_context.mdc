---
description: Share event handling context when working with event-related files
globs:
alwaysApply: false
---
# Event Handling Context

<rule>
name: event_handling_context
description: Share relevant event handling and testing documentation when working with event-related files
filters:
  - type: file
    pattern: **/*event*.rb
  - type: file
    pattern: **/*event*.md
  - type: file
    pattern: **/*loop*.rb
  - type: file
    pattern: **/*loop*.md
  - type: file
    pattern: **/*fiber*.rb
  - type: file
    pattern: **/*fiber*.md
  - type: file
    pattern: **/*catscradle*.rb
  - type: file
    pattern: **/*catscradle*.md

actions:
  - type: suggest
    message: |
      # Event Handling Context

      When working with Scarpe's event system, it's important to understand:

      1. Event Loop Architecture
         - [event_loops.md](mdc:docs/event_loops.md) - Core event loop documentation
         - [shoes_and_display_events.md](mdc:docs/shoes_and_display_events.md) - Event handling details
         - [catscradle.md](mdc:docs/yard/catscradle.md) - Fiber-based testing approach

      2. Key Testing Concepts:
         ```ruby
         # Example of Fiber-based test
         def test_html_dom_multiple_update
           run_test_scarpe_code(<<-'SCARPE_APP', app_test_code: <<-'TEST_CODE')
             Shoes.app do
               para "Hello World"
             end
           SCARPE_APP
             on_heartbeat do
               p = para()
               assert_include dom_html, "Hello World"
               p.replace("Goodbye World")
               wait fully_updated
               assert_include dom_html, "Goodbye World"
               test_finished
             end
           TEST_CODE
         end
         ```

      3. Event Types:
         - Mouse events (click, hover, etc.)
         - Keyboard events
         - Window events
         - Custom events
         - Heartbeat events

      4. Implementation Details:
         - Events are queued in order of arrival
         - Priority system for critical events
         - Fiber-based coordination for testing
         - Cooperative multitasking approach

      5. Best Practices:
         - Keep handlers fast and focused
         - Use Fiber-based testing for complex interactions
         - Handle errors appropriately
         - Maintain proper process separation

      6. Additional Resources:
         - Wiki: https://github.com/scarpe-team/scarpe/wiki/ScarpeDesign.md#event-loops
         - Related sections:
           * Display Service Separation
           * Shoes and Display Events
           * Timeouts and handlers

examples:
  - description: "Working with event handlers"
    input: |
      When implementing event handling:
      1. Consider using Fiber-based testing for complex scenarios
      2. Keep handlers non-blocking
      3. Use proper event dispatch patterns
      4. Consider process separation implications

metadata:
  priority: high
  version: 1.0
</rule>
